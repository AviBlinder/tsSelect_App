{
    "collab_server" : "",
    "contents" : "create_ts <- function(input_data,start_date = \"2000-01-01\",frequency_date = 12){\n    if(!is.numeric(input_data)){\n        stop (\"invalid input\")\n    }\n    \n    if(!frequency_date %in% c(1,4,12)){\n        stop (\"invalid frequency\")\n    }\n    \n    start_date_formatted <- ymd(start_date)\n    \n    start_date_part1 <- year(start_date_formatted) \n    \n    start_date_part2 <- switch(as.character(frequency_date), \n                               \"1\" = 1,\n                               \"4\" = lubridate::quarter(start_date),\n                               \"12\" = lubridate::month(start_date)\n    )\n    \n    ts(input_data,\n       start=c(start_date_part1,\n               start_date_part2),\n       frequency = frequency_date)\n}\n###################################################################################################\nrun_models <- function(ts1,accuracy_measure = NULL){\n    \n#    check_object(ts1)\n    \n    ##Check Auto-Correlations\n    acf <- Acf(ts1)\n    acf_max <- sort(acf$acf,decreasing = T)[2]\n    acf_treshold <- 0.25\n    #filter 'white noise\" series\n    if (acf_max < acf_treshold){\n        \n        stop(\"white noise !! Please review the input numbers\")\n    }\n    \n    ##################################################################################\n    #Step 1: Fit models\n    \n    ##Check if the time series has a seassonality component. If not, do not check \n    #  \"seassonal\" models\n    fit_tbats <- tbats(ts1)\n    seasonal <- !is.null(fit_tbats$seasonal)\n    \n    print ('running model 1 ')\n    print(fit_tbats[[\"fitted.values\"]])\n    \n    \n    fit_benchm1 <- meanf(ts1,6)  # Mean forecast (x, h) h = horizon\n    print (\"running model 2 \")\n    print(fit_benchm1[[\"fitted\"]])\n    \n    fit_benchm2 <- naive(ts1,6)  # Navive forecast (all forecasts = last observation)\n    print (\"running model 3 \")\n    print(fit_benchm2[[\"fitted\"]])\n    \n    if(seasonal){\n        fit_benchm3 <- snaive(ts1,1) # Seassonal Naive\n        print (\"running model 4 \")\n        print(fit_benchm3[[\"fitted\"]])\n        \n        fit_lm2 <- tslm(ts1 ~ trend + season)\n        print (\"running model 5 \")\n        print(fit_lm2[[\"fitted.values\"]])\n        \n        fit_hw1    <- hw(ts1,seasonal=\"additive\")\n        print (\"running model 6 \")\n        print(fit_hw1[[\"fitted\"]])\n        \n        fit_hw2    <- hw(ts1,seasonal=\"multiplicative\")\n        print (\"running model 7 \")\n        print(fit_hw2[[\"fitted\"]])\n    }\n\n    fit_benchm4 <- rwf(ts1,6,drift = TRUE) #Drift method - adds a \"trend\" over time to the naive method\n    print (\"running model 8 \")\n    print(fit_benchm4[[\"fitted\"]])\n    \n    fit_lm1 <- tslm(ts1 ~ trend)\n    print (\"running model 9\" )\n    print(fit_lm1[[\"fitted.values\"]])\n    \n    fit_ses <- ses(ts1)\n    print (\"running model 10 \")\n    print(fit_ses[[\"fitted\"]])\n    \n    fit_ets <- ets(ts1)\n    print (\"running model 11 \")\n    print(fit_ets[[\"fitted\"]])\n    \n    fit_holt1 <- holt(ts1)\n    print (\"running model 12 \")\n    print(fit_holt1[[\"fitted\"]])\n    \n    fit_holt2 <- holt(ts1,exponental=TRUE)\n    print (\"running model 13 \")\n    print(fit_holt2[[\"fitted\"]])\n    \n    fit_holt3 <- holt(ts1,damped=TRUE)\n    print (\"running model 14 \")\n    print(fit_holt3[[\"fitted\"]])\n    \n    fit_holt4 <- holt(ts1,exponential=TRUE,damped=TRUE)\n    print (\"running model 15 \")\n    print(fit_holt4[[\"fitted\"]])\n    \n    fit_auto_arima1 <- auto.arima(ts1,stepwise=TRUE)\n    print (\"running model 16 \")\n    print(fit_auto_arima1[[\"x\"]]-fit_auto_arima1[[\"residuals\"]])\n    \n    fit_auto_arima2 <-  auto.arima(ts1, stepwise=FALSE, approximation=FALSE)\n    print (\"running model 17 \")\n    print(fit_auto_arima2[[\"fitted\"]])\n    ##################################################################################\n    #Step 2: Measure accuracies\n    \n    ac_benchm1 <- data.frame(accuracy(fit_benchm1))\n    ac_benchm1$model <- \"meanf\"\n    row.names(ac_benchm1) <- NULL\n    #\n    ac_benchm2 <- data.frame(accuracy(fit_benchm2))\n    ac_benchm2$model <- \"naive\"\n    row.names(ac_benchm2) <- NULL\n    #\n    ac_benchm4 <- data.frame(accuracy(fit_benchm4))\n    ac_benchm4$model <- \"rwf\"\n    row.names(ac_benchm4) <- NULL\n    #\n    ac_lm1     <- data.frame(accuracy(fit_lm1))\n    ac_lm1$ACF1 <- NA\n    ac_lm1$model <- \"lm_with_trend\"\n    row.names(ac_lm1) <- NULL\n    \n    ac_tbats <- data.frame(accuracy(fit_tbats))\n    ac_tbats$model <- \"tbats\"\n    row.names(ac_tbats) <- NULL\n    \n    #\n    ac_ets     <- data.frame(accuracy(fit_ets))\n    ac_ets$model <- \"ets\"\n    row.names(ac_ets) <- NULL\n    #\n    ac_ses     <- data.frame(accuracy(fit_ses))\n    ac_ses$model <- \"ses\"\n    row.names(ac_ses) <- NULL\n    \n    #\n    if (seasonal){\n        ac_benchm3 <- data.frame(accuracy(fit_benchm3))\n        ac_benchm3$model <- \"snaive\"\n        row.names(ac_benchm3) <- NULL\n        \n        ac_lm2     <- data.frame(accuracy(fit_lm2))\n        ac_lm2$ACF1 <- NA\n        ac_lm2$model <- \"lm_with_trend_and_season\"\n        row.names(ac_lm2) <- NULL\n        \n        #\n        ac_hw1     <- data.frame(accuracy(fit_hw1))\n        ac_hw1$model <- \"Holt-Winters_additive\"\n        row.names(ac_hw1) <- NULL\n        \n        ac_hw2     <- data.frame(accuracy(fit_hw2))\n        ac_hw2$model <- \"Holt-Winters_multiplicative\"\n        row.names(ac_hw2) <- NULL\n        \n    }\n    #\n    \n    ac_holt1   <- data.frame(accuracy(fit_holt1))\n    ac_holt1$model <- \"Holt_simple\"\n    row.names(ac_holt1) <- NULL\n    #\n    ac_holt2   <- data.frame(accuracy(fit_holt2))\n    ac_holt2$model <- \"Holt_exponential\"\n    row.names(ac_holt2) <- NULL\n    #\n    ac_holt3   <- data.frame(accuracy(fit_holt3))\n    ac_holt3$model <- \"Holt_damped\"\n    row.names(ac_holt3) <- NULL\n    #\n    ac_holt4   <- data.frame(accuracy(fit_holt4))\n    ac_holt4$model <- \"Holt_exponential_damped\"\n    row.names(ac_holt4) <- NULL\n    \n    ac_auto_arima1     <- data.frame(accuracy(fit_auto_arima1))\n    ac_auto_arima1$model <- \"Auto_Arima\"\n    row.names(ac_auto_arima1) <- NULL\n    \n    ac_auto_arima2     <- data.frame(accuracy(fit_auto_arima2))\n    ac_auto_arima2$model <- \"Auto_Arima_No_Stepwise\"\n    row.names(ac_auto_arima2) <- NULL\n    \n    print (\"end of step 2 (calculating accuracy of models\")\n    ##################################################################################\n    #Step 3: Combine models and pick best one\n    \n    if (seasonal){\n        \n        accuracies <- rbind(ac_benchm1,ac_benchm2,ac_benchm3,ac_benchm4,\n                            ac_lm1,ac_lm2,ac_ets,ac_ses,\n                            ac_holt1,ac_holt2,ac_holt3,ac_holt4,ac_hw1,ac_hw2,\n                            ac_auto_arima1,ac_auto_arima2,ac_tbats)\n        all_models <-   list(\"meanf\"    =    fit_benchm1 ,\n                             \"naive\"         =    fit_benchm2 ,\n                             \"snaive\"        =    fit_benchm3 ,\n                             \"rwf\"           =    fit_benchm4 ,\n                             \"lm_with_trend\" =    fit_lm1     ,\n                             \"lm_with_trend_and_season\" = fit_lm2 ,\n                             \"ses\"           =    fit_ses ,\n                             \"ets\"           =    fit_ets ,\n                             \"Holt-Winters_additive\" =  fit_hw1 ,\n                             \"Holt-Winters_multiplicative\" = fit_hw2 ,\n                             \"Holt_simple\"   =    fit_holt1 ,\n                             \"Holt_exponential\"  =    fit_holt2 ,\n                             \"Holt_damped\"       =    fit_holt3 ,\n                             \"Holt_exponential_damped\" =    fit_holt4 ,\n                             \"Auto_Arima\"        =    fit_auto_arima1 ,\n                             \"Auto_Arima_No_Stepwise\" =    fit_auto_arima2,\n                             \"tbats\" = fit_tbats)\n        \n    } else {\n        accuracies <- rbind(ac_benchm1,ac_benchm2,ac_benchm4,\n                            ac_lm1,\n                            ac_holt1,ac_holt2,ac_holt3,ac_holt4,\n                            ac_auto_arima1,ac_auto_arima2,ac_tbats)\n        all_models <-   list(\"meanf\"    =    fit_benchm1 ,\n                             \"naive\"         =    fit_benchm2 ,\n                             \"rwf\"           =    fit_benchm4 ,\n                             \"lm_with_trend\" =    fit_lm1     ,\n                             \"Holt_simple\"   =    fit_holt1 ,\n                             \"Holt_exponential\"  =    fit_holt2 ,\n                             \"Holt_damped\"       =    fit_holt3 ,\n                             \"Holt_exponential_damped\" =    fit_holt4 ,\n                             \"Auto_Arima\"        =    fit_auto_arima1 ,\n                             \"Auto_Arima_No_Stepwise\" =    fit_auto_arima2,\n                             \"tbats\" = fit_tbats)\n        \n    }\n    \n    print (\"all_models created\")\n    \n    if(is.null(accuracy_measure)){\n        x2 <- c()\n        for (i in 1:ncol(accuracies)){\n            x1 <- accuracies[accuracies[,i] == min(accuracies[,i],na.rm = TRUE),\"model\"]\n            x2 <- c(x2,x1)\n        }\n        selected_model <- sort(table(x2),decreasing = TRUE)[1]\n    } else {\n        col <- which(names(accuracies) == accuracy_measure )\n        selected_model <- accuracies[accuracies[,col] == min(accuracies[,col],na.rm = TRUE),\"model\"]\n        if (length(selected_model) > 1) {\n            selected_model <- selected_model[3]\n        }\n    }\n    \n    print (\"accuracies : \")\n    print (accuracies)\n    print (\"end of step 3 - selected model = \")\n    print (names(selected_model))\n    list(selected_model_name = names(selected_model),\n                      model=all_models[names(all_models) == names(selected_model)])\n}\n###################################################################################################\ncheck_object <- function(x){\n    \n    if (!exists(x) ) {\n        stop(\"missing input variable !\")\n    }\n}\n##################################################################################################\nplot_dygraph <- function(ts1,output_model,forecasted_periods){\n    selected_model <- output_model[[\"model\"]][[1]]\n    selected_model <- forecast(selected_model,h=forecasted_periods)\n    \n    model_name <- output_model[[\"selected_model_name\"]]\n    \n    title_name <- paste0(\"Predicted Time Series using \", model_name , \" model \")\n    title_name\n\n    predicted_mts <- as.xts(cbind(fit = selected_model[[\"mean\"]],\n                                             lwr = selected_model[[\"lower\"]][,2],\n                                             upr = selected_model[[\"upper\"]][,2]))\n    \n    ts1_xts <- as.xts(ts1)\n    ts1_xts\n    colnames(ts1_xts) <- \"original\"\n    ts1_xts;predicted_mts\n    all <- cbind(ts1_xts, predicted_mts)\n \n}",
    "created" : 1480101856591.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3428918054",
    "id" : "C679D0A5",
    "lastKnownWriteTime" : 1480184719,
    "last_content_update" : 1480184719079,
    "path" : "D:/DataScienceProjects/tsSelect_app/helpers.r",
    "project_path" : "helpers.r",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}